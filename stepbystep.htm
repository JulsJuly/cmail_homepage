<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>cmail: Step-by-step setup</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<link rel="icon" href="static/cmail_logo.png" type="image/x-icon" />
		<link rel="shortcut icon" href="static/cmail_logo.png" type="image/x-icon" />
		<link rel="stylesheet" type="text/css" href="static/cmail.css" />
		<meta name="description" content="cmail - Internet mail processing suite with SQLite backend" />
		<meta name="keywords" content="cmail, smtp, email, pop, webmail, messaging, setup from source, step by step" />
		<meta name="robots" content="index,follow" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
	</head>
	<body>
		<div>
			<a href="index.htm">Back</a> to the main page
		</div>

		<div>
			<h1>Step by step setup</h1>
			This page details the process of installing and configuring
			a functional cmail server.
		</div>

		<div class="section">
			<h2>1a Setup from packages</h2>
			Install the package with your package manager of choice (eg. dpkg, pacman).
			Depending on the package maintainer, this process may already run a dialog
			of some sorts querying basic configuration information.
		</div>

		<div class="section">
			<h2>1b Setup from source</h2>
			<i>(Examples given for debian-based systems)</i>
			<p>
			We're going to assume the system already sports a working C compiler
			as well as the git version control system. First, we're going to install the
			build prerequisites. 
			</p>
			<p>
			<code style="display:block;">
				~# apt-get install libsqlite3-dev<br/>
				~# apt-get install nettle-dev<br/>
				~# apt-get install libgnutls28-dev<br/>
				~# apt-get install libadns1-dev
			</code>
			</p>

			<p>
			Additionally, we're going to install some tools needed for initial setup operations.
			</p>
			<p>
			<code style="display:block;">
				~# apt-get install sqlite3<br/>
				~# apt-get install openssl<br/>
			</code>
			</p>

			<p>
			Next, we'll clone the cmail repository to the disk
			</p>
			<p>
			<code style="display:block;">
				~# git clone https://github.com/cmail-mta/cmail
			</code>
			</p>

			<p>
			In the cloned directory, run <code>make</code> to build all modules, followed
			by <code>make install</code> to copy the binaries to a system path (by default
			<code>/usr/sbin/</code>, this may be changed by supplying the environment variable
			<code>PREFIX</code>).  The system documentation, available with 
			<code>man <em>&lt;component&gt;</em></code> is installed by running
			<code>make install-doc</code>.
			</p>
			<p>
			Running <code>make init</code> after this step will create a
			new user for cmail (in order to minimize attack surface, cmail is not usually run as root
			and instead drops its privileges after initialization), copy over default configuration files,
			correctly set privileges and generally set up the basic structure needed for operation. 
			Alternatively, the <code>make tls-init</code> command does all that and also generates a temporary TLS
			certificate and key for initial usage and testing (openssl required). Please remember to replace the
			generated key and certificate with secure ones when using this option.
			</p>
			<p>
			<code style="display:block;">
				~# cd cmail<br/>
				~/cmail# make<br/>
				~/cmail# make install<br/>
				~/cmail# make install-doc<br/>
				~/cmail# make tls-init
			</code>
			</p>
			<p>
			After these steps, the core cmail binaries as well as the administration tool suite will have
			been installed. Should you prefer using the web administration interface to the command line tools,
			the HTTP API and web panel need to be installed additionally.
			</p>

			<p>
			In order to have cmail start up at boot time, your init system may need specific files (such as service files
			or init scripts). Example files are provided in <code>startup-scripts/</code> for systemd and sysvinit.
			Check the documentation for your system to find out how to install these files.
			</p>
		</div>

		<div class="section">
			<h2>2 Check the generated configuration files</h2>
			... or copy them over from <code>example-configs/</code> if you do not want to use the
			provided setup mechanisms. Make sure to edit the BANNER parameters to <code>bind</code> directives
			to read something sensible (Most likely, this should be the hostname of your new mailserver).

			<p>
			Also make sure to replace the TLS key material generated by <code>make tls-init</code> with properly
			signed and trusted keys.
			</p>
		</div>

		<div class="section">
			<h2>2a Test the configuration</h2>
			This step might not be needed when installing from source, but it is nevertheless useful for learning
			how to debug your mail server.
			
			<p>
				To do this, run the daemons one by one without having them detach from the console, so you can
				see their debug information printed. After verifying that the configuration works, exit the daemons
				again by pressing <code>Ctrl-C</code>.

				<p>
				<code style="display:block;">
					~# cmail-smtpd nodetach /etc/cmail/smtpd.conf<br/>
					~# cmail-popd nodetach /etc/cmail/popd.conf<br/>
					~# cmail-dispatchd nodetach /etc/cmail/dispatchd.conf<br/>
				</code>
				</p>
			</p>
			<p>
				<h3>Common problems</h3>
				<ul>
					<li>
						<strong>"Could not bind to port 25"</strong><br/>
						There might already be an MTA installed on your system (such as exim or
						OpenSMTPd). List all currently bound listening sockets with
						<p>
						<code style="display:block;">
							~# ss -lt
						</code>
						</p>
						To find out what program is using the port, run
						<p>
						<code style="display:block;">
							~# lsof | grep TCP
						</code>
						</p>
						To solve this problem, uninstall the conflicting program with
						e.g
						<p>
						<code style="display:block;">
							~# apt-get uninstall exim4*
						</code>
						</p>
					</li>
					<li>
						<strong>No connection to the services from remote hosts</strong><br />
						Be sure to configure your firewall (and in some cases, your provider's firewall)
						to allow connections on the cmail service ports.
					</li>
				</ul>
			</p>
		</div>

		<div class="section">
			<h2>3 Set up the master database</h2>
			cmail uses <a href="https://sqlite.org/">SQLite</a>, a file-based database to store
			most of its running configuration and data. Administration of a running cmail server
			can either be performed by using the cmail-admin suite of command line tools or by using
			the HTTP API and web panel.
			<p>
				<h3>Relevant tools:</h3>
				<a href="admin/user.htm">cmail-admin-user</a>, 
				<a href="admin/address.htm">cmail-admin-address</a>, 
				<a href="admin/smtpd.htm">cmail-admin-smtpd</a>, 
				<a href="admin/popd.htm">cmail-admin-popd</a>
			</p>
		</div>

		<div class="section">
			<h2>4 Testing the server</h2>
			This section describes some steps you can take to confirm your server is operating
			correctly.

			<p>
				<h3>Testing socket level connectivity (using gnutls-cli)</h3>
				To confirm your server is responding to connections from the outside world,
				run the following command from another host for each relevant port and confirm you see a prompt.
				<p>
				<code style="display:block;">
					~# gnutls-cli --starttls --insecure --crlf --port <em>&lt;port&gt;</em> <em>&lt;host&gt;</em>
				</code>
				</p>
				
				Watch for the following prompts:
				<ul>
					<li><strong>SMTP</strong>: 220 <em>&lt;banner&gt;</em> ESMTP service ready</li>
					<li><strong>POP3</strong>: +OK <em>&lt;banner&gt;</em> POP3 ready</li>
				</ul>

				For <code>tlsonly</code> ports you may need to press <code>Ctrl-D</code> once to
				start TLS negotiation. A second <code>Ctrl-D</code> will close the connection.
			</p>

			<p>
				<h3>Testing protocol level operation (using swaks)</h3>
				<code>swaks</code> is a tool used for testing mail server operation by simply sending
				test mails. Run the tool from another host with
				<p>
				<code style="display:block;">
					~# swaks --from foo@bar.baz --to <em>&lt;recipient&gt;</em> --server <em>&lt;host&gt;</em>
				</code>
				</p>
				The recipient account should now have a new message.
			</p>

			<p>
				<h3>Testing operation using your email client</h3>
				Configure your email client to use your new server for receiving and sending and send some
				test emails ;)
			</p>

			<p>
				<h3>Common problems</h3>
				<ul>
					<li>
						<strong>No connection from outside to port 25 (or any other ports)</strong><br/>
						Some providers may configure servers with a default firewall blocking access to certain ports.
						Make sure your server is listening on the relevant ports with
						<p>
						<code style="display:block;">
							~# ss -lt
						</code>
						</p>
						and check your local firewall rules with
						<p>
						<code style="display:block;">
							~# iptables -L -v 
						</code>
						</p>
					</li>
				</ul>
			</p>
		</div>
	</body>
</html>
