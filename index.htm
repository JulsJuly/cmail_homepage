<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>cmail: Overview</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<link rel="icon" href="static/cmail_logo.png" type="image/x-icon" />
		<link rel="shortcut icon" href="static/cmail_logo.png" type="image/x-icon" />
		<link rel="stylesheet" type="text/css" href="static/cmail.css" />
		<meta name="description" content="cmail - Internet mail processing suite with SQLite backend" />
		<meta name="keywords" content="cmail, smtp, email, pop, webmail, messaging" />
		<meta name="robots" content="index,follow" />
		<meta name="google-site-verification" content="LhCD1XfN6u3dGL8xSrm7-Xi6-z_STIS_pqVky8NNgUY" />
	</head>
	<body>

		<div>
			<img src="static/cmail_logo.svg" style="height:7em;float:left;padding:1em;" />
			<h1>cmail</h1>
			<h3>Internet mail processing suite with SQLite backend</h3>
			cmail is an implementation of multiple protocols to fulfill most, if not all
			functions commonly expected in internet message exchange - commonly known as
			&quot;mail server&quot;.
		</div>

		<div style="clear:both;">
			  Architecturally, cmail is split into several modules which interface through
			  a central SQLite database (the master database).
			  <ul>
				  <li><a href="api.htm">cmail-api</a>			<i>HTTP API to the master database</i></li>
				  <li><a href="msa.htm">cmail-msa</a>			<i>SMTP server (Accept incoming / originated mails)</i></li>
				  <li><a href="popd.htm">cmail-popd</a>			<i>POP server (Access mailboxes via POP)</i></li>
				  <li><a href="imapd.htm">cmail-imapd</a>		<i>IMAP server (Access mailboxes via IMAP)</i></li>
				  <li><a href="mta.htm">cmail-mta</a>			<i>SMTP client (Delivers outgoing mails to remote servers)</i></li>
				  <li><a href="webadmin.htm">cmail-webadmin</a>		<i>HTTP Administration interface</i></li>
				  <li><a href="webmailer.htm">cmail-webmailer</a>	<i>Web mailer interface</i></li>
			  </ul>
		</div>

		<div>
			<h2>Development Rationale</h2>
			cmail was started out of resignation over the complexity involved in configuring and running
			many other MTAs. As such, the configuration file format is relatively simple and only affects
			the specifics of the module it is written for. For the most part the configuration files consist
			of directives specifying on which ports the module should provide its service.
			
			<p>
			The primary objective of the project is to provide an easy-to-setup, easy-to-configure and secure
			mail server for end-users that simply want to send and receive mails on their domains.
			Other use cases are, of course, supported, but not with as high a priority.
			</p>

			<p>
			The common configuration, such as local addresses, routing decisions and user data are kept in
			the master database. This provides flexibility of reconfiguration without restarting the modules,
			as well as allowing for the use of a variety of interfaces to configure the server, such as the
			provided Web Panel or an SQLite database editor.
			</p>
			<p>
			cmail was intentionally kept simple in terms of configuration as well as features. It might not
			support some features experienced administrators may be accustomed to out-of-the-box. 
			Most of it can probably be enabled or emulated with sufficient thought, though.
			</p>
			<p>
			Should that not be enough, cmail provides an internal API for modifying its behaviour with 
			runtime-loaded shared libraries (plugins).
			</p>
			If cmail still does not meet your expectations after that, you might be better off using another
			MTA :)
		</div>

		<div>
			<h2>Coarse roadmap</h2>
			<ol>
				<li><i>cmail-mta</i> Basic functionality</li>
				<li><i>cmail-msa</i> Plugin API specification</li>
				<li><i>cmail</i> Initial packaging &amp; setup scripts</li>
				<li><i>cmail-imapd</i> Basic implementation</li>
			</ol>
			This listing should not be taken at face value. Development pace is not easy to estimate,
			and features may be postponed because of lack of interest or more pressing issues.
			<p>
			For finer grained To-Do lists, check the individual module folders in the repository
			for files named TODO.
			</p>
		</div>

		<div>
			<h2>Common use cases</h2>
			
			<h3>Receive-only server, mail is sent via external servers</h3>
			The following modules are involved
			<ul>
				<li>cmail-msa for receiving incoming mail</li>
				<li>cmail-popd or cmail-imapd for access to mailboxes</li>
				<li>Optionally: cmail-api and cmail-webadmin for easier administration</li>
				<li>Optionally: cmail-api and cmail-webmailer for web access to mailboxes</li>
			</ul>

			<h3>Send-only server</h3>
			This use case might be better served by nullmailer. Should you chose to want to implement
			it using cmail, you'd need
			<ul>
				<li>cmail-msa for accepting originated mail</li>
				<li>cmail-mta for delivering the outbound mail</li>
				<li>Optionally: cmail-api and cmail-webadmin for easier administration</li>
			</ul>

			<h3>Full-feature send- and receive-server</h3>
			This setup involves the following modules
			<ul>
				<li>cmail-msa for receiving incoming mail</li>
				<li>cmail-popd and/or cmail-imapd for access to mailboxes</li>
				<li>cmail-mta for delivering the outbound mail</li>
				<li>Optionally: cmail-api and cmail-webadmin for easier administration</li>
				<li>Optionally: cmail-api and cmail-webmailer for web access to mailboxes</li>
			</ul>
		</div>

		<!-- Currently commented out. There should be some more text here.
		<div>
			<h2>Reasons for choosing cmail</h2>
			<div>
				<h3>Easy setup</h3>
			</div>

			<div>
				<h3>Easy configuration</h3>
				Mail server configuration is normally a task best left to experts. Feedback upon
				wrong configuration is scarce, and introducing security problems is easy.
				Configuration files for cmail modules are scarcely more than port bind directives
				and logging options, reducing the amount of things that can go wrong at module
				configuration time. Even at run-time, cmail makes it really hard to configure it
				to do dangerous things, such as presenting an open relay, while keeping it easy
				to add new addresses, domains and users.
			</div>

			<div>
				<h3>Small codebase</h3>
				The cmail codebase is considerably smaller than that of most other MTAs, making it
				easier to understand, debug and fix problems that may arise.
			</div>

			<div>
				<h3>Simple storage</h3>
			</div>
		</div>
		//-->

		<div>
			<h2>Contributing</h2>
			cmail is distributed under the <a href="http://opensource.org/licenses/BSD-2-Clause">BSD 2-Clause license</a>. 
			Any contributors must agree to have their code placed under that same license.
			The main development languages are C (daemons), PHP (API backend) and
			JavaScript/HTML (web panels). 
			
			<p>
			Contributions are very welcome! You may either submit pull requests or issues on 
			<a href="http://github.com/cmail-mta/">github</a> or send patches, ideas, requests, 
			praise or experiences to <a href="mailto:devel@cmail.rocks">devel@cmail.rocks</a> :)
			</p>
		</div>

		<div>
			<h2>Resources</h2>
			<ul>
				<li>Project homepage: <a href="http://cmail.rocks/">cmail.rocks</a></li>
				<li>Github organisation: <a href="https://github.com/cmail-mta/">github.com/cmail-mta</a></li>
				<li>git repository (main): <i>git clone</i> <a href="http://git.services.cbcdn.com/cmail">git.services.cbcdn.com/cmail</a></li>
				<li>git repository (contrib): <i>git clone</i> <a href="http://git.services.cbcdn.com/cmail-contrib">git.services.cbcdn.com/cmail-contrib</a></li>
			</ul>
		</div>
	</body>
</html>
